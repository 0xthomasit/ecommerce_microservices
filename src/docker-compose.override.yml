services:
  #Database section
  
  #orderdb: sql server
  orderdb:
    container_name: orderdb
    environment:
      - MSSQL_SA_PASSWORD=Admin3000
      - ACCEPT_EULA=Y
    restart: always
    volumes:
      - sqlserver_data:/var/lib/sqlserver/data
    ports:
      - "1435:1433"

  #productdb: mysql
  productdb:
    container_name: productdb
    environment:
      - MYSQL_ROOT_USER=thomas
      - MYSQL_ROOT_PASSWORD=Admin3000
    restart: always
    volumes:
      - mysql_data:/bitnami/mysql/data
    ports:
      - "3306:3306"

  #customerdb: postgres
  customerdb:
    container_name: customerdb
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin3000
      - POSTGRES_DB=CustomerDb
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - postgresql_data:/bitnami/postgresql

  #basketdb: redis
  basketdb:
    container_name: basketdb
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/bitnami/redis/data

  #inventorydb: mongo
  inventorydb:
    container_name: inventorydb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/bitnami/mongodb

  #Infrastructure section

  rabbitmq:
    container_name: rabbitmq
    environment:
      - RABBITMQ_SECURE_PASSWORD=yes
      - RABBITMQ_USERNAME=thomas
      - RABBITMQ_PASSWORD=Admin3000
      - RABBITMQ_LOGS=-
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - rabbitmq_data:/bitnami/rabbitmq/mnesia
  
  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=0xthomasit@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=Admin3000
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin
  
  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  
  elasticsearch:
    container_name: elasticsearch
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/bitnami/elasticsearch/data
  
  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
  
  # microservices api section
  product.api:
    container_name: product.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=productdb;Port=3306;Database=ProductDB;Uid=thomas;Pwd=Admin3000;"
    depends_on:
      - productdb
    ports:
      - "6002:80"
    restart: always
  
  customer.api:
    container_name: customer.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=customerdb;Port=5432;Database=CustomerDB;User Id=postgres;Password=Admin3000;"
    depends_on:
      - customerdb
    ports:
      - "6003:80"
    restart: always

  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "CacheSettings:ConnectionString=basketdb:6379"
      - "EventBusSettings:HostAddress=amqp://thomas:Admin3000@rabbitmq:5672"
      - "GrpcSettings:StockUrl=http://inventory.grpc"
    depends_on:
      - basketdb
      - rabbitmq
    ports:
      - "6004:80"
    restart: always
  
  ordering.api:
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=orderdb;Database=OrderDb;User Id=sa;Password=Admin3000;Encrypt=false;MultipleActiveResultSets=true;"
      - "EventBusSettings:HostAddress=amqp://thomas:Admin3000@rabbitmq:5672"
    depends_on:
      - orderdb
      - rabbitmq
    ports:
      - "6005:80"
    restart: always
    
  inventory.product.api:
    container_name: inventory.product.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "MongoDbSettings:ConnectionString=mongodb://inventorydb:27017"
      - "MongoDbSettings:DatabaseName=InventoryDb"
    depends_on:
      - inventorydb
    ports:
      - "6006:80"
    restart: always
    
  inventory.grpc:
    container_name: inventory.grpc
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "MongoDbSettings:ConnectionString=mongodb://inventorydb:27017"
      - "MongoDbSettings:DatabaseName=InventoryDb"
    depends_on:
      - inventorydb
    ports:
      - "6007:80"
    restart: always
  
  apigw.ocelot:
    container_name: apigw.ocelot
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
      - "GlobalConfiguration:BaseUrl=http://apigw.ocelot"
    depends_on:
      - customer.api
      - basket.api
      - product.api
      - ordering.api
      - inventory.product.api
    ports:
      - "6001:80"
    restart: always